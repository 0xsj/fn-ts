services:
  # MySQL Primary Database
  mysql:
    image: mysql:8.0
    container_name: fn-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-fn_db}
      MYSQL_USER: ${DB_USER:-fn_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-fn_password}
    ports:
      - '3306:3306'
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max_connections=200
      --innodb_buffer_pool_size=1G
      --innodb_log_file_size=256M
      --slow_query_log=1
      --long_query_time=2
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
    networks:
      - fn-network

  # Redis - Cache, Sessions, Queues, Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: fn-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fn-network

  # Elasticsearch - Full-text Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: fn-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - cluster.name=fn-cluster
      - node.name=fn-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fn-network

  # Kibana - Elasticsearch UI (Development)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: fn-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - '5601:5601'
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:5601/api/status || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fn-network
    profiles:
      - dev

  # Redis Commander - Redis UI (Development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fn-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - '8081:8081'
    depends_on:
      - redis
    networks:
      - fn-network
    profiles:
      - dev

  # Bull Board - Queue Dashboard (Development)
  bull-board:
    image: deadly0/bull-board:latest
    container_name: fn-bull-board
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - '3030:3000'
    depends_on:
      - redis
    networks:
      - fn-network
    profiles:
      - dev

  # Adminer - Database UI
  adminer:
    image: adminer:latest
    container_name: fn-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      ADMINER_DEFAULT_SERVER: mysql
      ADMINER_DESIGN: nette
    depends_on:
      - mysql
    networks:
      - fn-network
    profiles:
      - dev

  # MinIO - S3-compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: fn-minio
    restart: unless-stopped
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - fn-network

networks:
  fn-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  elasticsearch_data:
  minio_data:
