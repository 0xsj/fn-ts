services:
  # MySQL - Primary relational database
  mysql:
    image: mysql:8.0
    container_name: fn-mysql
    restart: unless-stopped
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-fn_db}
      MYSQL_USER: ${MYSQL_USER:-fn_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-fn_password}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/mysql-init:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
    networks:
      - fn-network

  # MongoDB - Document store for analytics, logs, messages
  mongodb:
    image: mongo:7.0
    container_name: fn-mongodb
    restart: unless-stopped
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-adminpassword}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-fn_db}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/mongo-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - fn-network

  # Redis - Cache and Queue
  redis:
    image: redis:7-alpine
    container_name: fn-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fn-network

  # Elasticsearch - Full-text search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: fn-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fn-network

  # Development Tools

  # RedisInsight - Redis GUI
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: fn-redisinsight
    restart: unless-stopped
    ports:
      - '8081:8001'
    volumes:
      - redisinsight_data:/db
    networks:
      - fn-network
    profiles:
      - dev

  # Mongo Express - MongoDB GUI
  mongo-express:
    image: mongo-express:latest
    container_name: fn-mongo-express
    restart: unless-stopped
    ports:
      - '8082:8081'
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-adminpassword}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-adminpassword}@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongodb
    networks:
      - fn-network
    profiles:
      - dev

  # Adminer - Database UI (MySQL)
  adminer:
    image: adminer:latest
    container_name: fn-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      ADMINER_DEFAULT_SERVER: mysql
      ADMINER_DESIGN: nette
    depends_on:
      - mysql
    networks:
      - fn-network
    profiles:
      - dev

  # MinIO - S3-compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: fn-minio
    restart: unless-stopped
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - fn-network

networks:
  fn-network:
    driver: bridge

volumes:
  mysql_data:
  mongodb_data:
  mongodb_config:
  redis_data:
  elasticsearch_data:
  minio_data:
  redisinsight_data:
