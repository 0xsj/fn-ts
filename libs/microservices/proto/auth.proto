syntax = "proto3";

package auth;

// The Auth service definition.
service AuthService {
  // RPC to check service health.
  rpc HealthCheck (Empty) returns (HealthCheckResponse);

  // RPC for user sign-in using password.
  rpc SignInWithPassword (SignInRequest) returns (SignInResponse);

  // RPC for user sign-in using a magic link.
  rpc SignInWithMagicLink (MagicLinkRequest) returns (SignInResponse);

  // RPC for user sign-in using a token.
  rpc SignInWithToken (TokenRequest) returns (SignInResponse);

  // RPC for federated sign-in (e.g., Google, Facebook).
  rpc SignInWithFederatedIdentity (FederatedSignInRequest) returns (SignInResponse);

  // RPC to refresh an authentication token.
  rpc RefreshToken (RefreshTokenRequest) returns (SignInResponse);

  // RPC to sign out the user.
  rpc SignOut (SignOutRequest) returns (SignOutResponse);
}

message Empty {}

// Request message for sign-in using password.
message SignInRequest {
  string username = 1; // Username of the user
  string password = 2; // Password of the user
}

// Response message for sign-in operations.
message SignInResponse {
  bool success = 1; // Indicates if the sign-in was successful
  string token = 2; // Optional: JWT token
  string refreshToken = 3; // Optional: Refresh token
  string message = 4; // Message indicating the result of the sign-in attempt
}

// Request message for sign-in using a magic link.
message MagicLinkRequest {
  string email = 1; // Email address for magic link authentication
}

// Request message for sign-in using a token.
message TokenRequest {
  string token = 1; // Authentication token
}

// Request message for federated sign-in.
message FederatedSignInRequest {
  string provider = 1; // Federated provider (e.g., "google", "facebook")
  string accessToken = 2; // Access token from the federated provider
}

// Request message for refreshing a token.
message RefreshTokenRequest {
  string refreshToken = 1; // Refresh token
}

// Request message for signing out the user.
message SignOutRequest {
  string token = 1; // Token to invalidate on sign-out
}

// Response message for sign-out.
message SignOutResponse {
  bool success = 1; // Indicates if the sign-out was successful
  string message = 2; // Message indicating the result of the sign-out attempt
}

// Response message for health check.
message HealthCheckResponse {
  string status = 1; // Status of the service (e.g., "OK" or "Service is running")
}
